import fsp from 'node:fs/promises'
import { join, parse } from 'node:path/posix'
import { URL, fileURLToPath } from 'node:url'

import fg from 'fast-glob'

const pathToLib = fileURLToPath(new URL(`../lib/`, import.meta.url))
const getExport = path => `export * from './${path}'\n`
const getDefaultExport = (name, path) => `export { default as ${name} } from './${path}'\n`

async function generateIndexFile(isRoot = false) {
    let exports = `// That is autogenerated file\n`

    try {
        if (isRoot)
            exports += getDefaultExport('dmcUtilsAutoImportPreset', 'preset/autoImportUtilsPreset')

        const files = await fg('**/*.ts', {
            ignore: [
                'preset',
                'index.*',
                '**/index.*',
            ],
            // absolute: true,
            // objectMode: true,
            cwd: fileURLToPath(new URL(`../lib/`, import.meta.url)),
        })

        for (const importPath of files) {
            const fileNoExt = parse(importPath)
            const exportPath = join(fileNoExt.dir, fileNoExt.name)

            exports += getExport(exportPath)
        }
    }
    catch (err) {
        // handling error
        if (err)
            console.error(`Unable to scan directory: ${err}`)
    }

    await fsp.writeFile(`${pathToLib}/index.ts`, exports, 'utf-8')
}

generateIndexFile(true)
